substitutions:
  name: "ttgo-display"
  friendly_name: ESPHome Web 74fcd4

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

esp32:
  board: esp32dev
  framework:
    type: arduino


# Enable logging
logger: {}

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Set up a wifi access point
  ap: 
    ssid: "Esphome-Web-74fcd4"
    password: "ESPHomeLeaf"

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

spi:
  clk_pin: GPIO018
  mosi_pin: GPIO19

api: {}

## Sensors
text_sensor:
  - platform: homeassistant
    entity_id: input_text.logger
    id: msg_logger
  - platform: homeassistant
    entity_id: input_text.warning_logger
    id: warning_logger
  - platform: homeassistant
    entity_id: light.light_group_salon
    id: light_group_salon
    internal: true
  - platform: homeassistant
    entity_id: light.ampoule_cuisine
    id: light_cuisine
    internal: true

# Binary sensors
binary_sensor:
  - platform: gpio    ## Short press button 0 (BOTTOM)
    pin: 
      number: GPIO0
      inverted: true
      allow_other_uses: True
      mode: 
        input: true
        pullup: true
    name: "Short Press Button 0"
    id: short_press_button_0
    on_click: 
      min_length: 1ms
      max_length: 1000ms
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.light_group_salon
        - component.update: my_display
  - platform: gpio    ## Short press button 1 (TOP)
    pin: 
      number: GPIO35
      inverted: true
      allow_other_uses: True
    name: "Short Press Button 1"
    id: short_press_button_1
    on_click: 
      min_length: 1ms
      max_length: 1000ms
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: light.ampoule_cuisine
        - component.update: my_display
  - platform: gpio    ## Long press button 1 (TOP)
    pin: 
      number: GPIO35
      inverted: true
      allow_other_uses: true
    id: long_press_button_1
    on_click: 
      min_length: 1001ms
      max_length: 5000ms
      then:
        - display.page.show_next: my_display
        - component.update: my_display
  - platform: gpio    ## Long press button 2 (BOTTOM)
    pin: 
      number: GPIO0
      inverted: true
      allow_other_uses: true
    id: long_press_button_2
    on_click: 
      min_length: 1001ms
      max_length: 5000ms
      then:
        - display.page.show_next: my_display
        - component.update: my_display
      
display:
  - platform: st7789v
    model: TTGO_TDISPLAY_135X240
    backlight_pin: 
      number: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 90Â°
    update_interval: 1s
    id: my_display
    pages: 
      - id: light_status
        lambda: |-
          it.printf(10, 30, id(latoblackheading1), WHITE, "Lights");
          
          // Salon lights status
          it.printf(20, 70, id(latoblack), WHITE, "Salon:");
          if (id(light_group_salon).has_state()) {
            if (id(light_group_salon).state == "on") {
              it.filled_rectangle(100, 70, 20, 20, GREEN);
              it.printf(125, 70, id(latoblack), WHITE, "ON");
            } else {
              it.filled_rectangle(100, 70, 20, 20, RED);
              it.printf(125, 70, id(latoblack), WHITE, "OFF");
            }
          } else {
            it.filled_rectangle(100, 100, 20, 20, YELLOW);
            it.printf(125, 100, id(latoblack), WHITE, "Unknown");
          }
          
          // Cuisine light status
          it.printf(20, 100, id(latoblack), WHITE, "Cuisine:");
          
          if (id(light_cuisine).has_state()) {
            if (id(light_cuisine).state == "on") {
              it.filled_rectangle(100, 100, 20, 20, GREEN);
              it.printf(125, 100, id(latoblack), WHITE, "ON");
            } else {
              it.filled_rectangle(100, 100, 20, 20, RED);
              it.printf(125, 100, id(latoblack), WHITE, "OFF");
            }
          } else {
            it.filled_rectangle(100, 100, 20, 20, YELLOW);
            it.printf(125, 100, id(latoblack), WHITE, "Unknown");
          }
          it.printf(10, 140, id(lato), YELLOW, "Button 0: Toggle Salon");
          it.printf(10, 160, id(lato), YELLOW, "Button 1: Toggle Cuisine");
      - id: notifications
        lambda: |-
          it.printf(10, 10, id(latoblackheading1), WHITE, "Notifications");
          if (id(msg_logger).has_state()) {
            // Handle potentially long notification text with word wrapping
            std::string message = id(msg_logger).state;
            int y_pos = 70;
            int max_width = 220;  // Max width for text
            int line_height = 20;  // Height between lines
            
            size_t start = 0;
            size_t end = 0;
            
            while (start < message.length() && y_pos < 200) {
              // Calculate how many characters fit in a line
              size_t chars_that_fit = 30;  // Approximate characters per line
              
              end = start + chars_that_fit;
              if (end >= message.length()) {
                end = message.length();
              } else {
                // Try to break at space
                size_t space_pos = message.rfind(' ', end);
                if (space_pos > start && space_pos < end) {
                  end = space_pos + 1;
                }
              }
              
              it.printf(10, y_pos, id(latoblack), WHITE, "%s", message.substr(start, end - start).c_str());
              y_pos += line_height;
              start = end;
            }
          } else {
            it.printf(10, 70, id(latoblack), WHITE, "No notifications");
          }
      - id: showmessage
        lambda: |-
          // it.image(0, 35, id(sh_image));
          if (id(msg_logger).has_state()) {
            it.printf(75,60,id(latoblack), WHITE, "%s", id(msg_logger).state);
          } else {
            it.printf(75,60,id(latoblack), WHITE, "LOADING...");
          }

## Colors
color:
  - id: WHITE
    red: 100%
    green: 100%
    blue: 100%
  - id: GREEN
    red: 0%
    green: 100%
    blue: 0%
  - id: RED
    red: 100%
    green: 0%
    blue: 0%
  - id: YELLOW
    red: 100%
    green: 100%
    blue: 0%

## Images
image:
  - file: 'images/Smart-Home-icon.png'
    id: sh_image
    resize: 60x60
    type: RGB

## Fonts:
font:
  - file:
      type: gfonts
      family: Lato
      weight: 400
    id: lato
    size: 15
  - file:
      type: gfonts
      family: Lato
      weight: 900
    id: latoblack
    size: 15
  - file:
      type: gfonts
      family: Lato
      weight: 900
    id: latoblackheading1
    size: 30
