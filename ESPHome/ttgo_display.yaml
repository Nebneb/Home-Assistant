substitutions:
  name: "ttgo-display"
  friendly_name: ESPHome Web 74fcd4

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

esp32:
  board: esp32dev
  framework:
    type: arduino


# Enable logging
logger: {}

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Set up a wifi access point
  ap: 
    ssid: "Esphome-Web-74fcd4"
    password: "ESPHomePWD"

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

# defines the Serial Peripheral Interface (SPI) pins for
# communicating with the display on the TTGO T-Display.
spi:
  clk_pin: GPIO018
  mosi_pin: GPIO19

api: {}

## Sensors
text_sensor:
  - platform: homeassistant
    entity_id: input_text.ttgo_logger ## Dedicated logger input_text in HA
    id: ttgo_logger
  - platform: homeassistant
    entity_id: light.light_group_salon ## Light group for living room
    id: light_group_salon
    internal: true
  - platform: homeassistant
    entity_id: light.ampoule_cuisine ## Light for the kitchen
    id: light_cuisine
    internal: true

# Binary sensors
binary_sensor:
  - platform: gpio    ## Short press button 0 (BOTTOM)
    pin: 
      number: GPIO0
      inverted: true
      mode: 
        input: true
        pullup: true
    name: "Short Press Button bottom (0)"
    id: short_press_button_bottom
    on_click: 
      min_length: 1ms
      max_length: 1000ms
      then:
        ## Listened by Home Assistant
        - component.update: my_display
  - platform: gpio    ## Short press button 1 (TOP)
    pin: 
      number: GPIO35
      inverted: true
    name: "Short Press Button top (1)"
    id: short_press_button_top
    on_click: 
      min_length: 1ms
      max_length: 1000ms
      then:
        ## Listened by Home Assistant
        - component.update: my_display
      
display:
  - platform: st7789v
    model: TTGO_TDISPLAY_135X240
    backlight_pin: 
      number: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 90Â°
    update_interval: 1s
    id: my_display
    pages: 
      - id: light_status
        lambda: |-
          it.printf(10, 10, id(latoblackheading1), WHITE, "Lights");
          
          int line_1 = 35;
          int line_2 = line_1+25;
          int line_3 = line_2+35;

          // Salon lights status
          it.printf(20, line_1, id(latoblack), WHITE, "Salon");
          if (id(light_group_salon).has_state()) {
            if (id(light_group_salon).state == "on") {
              it.filled_circle(110, line_1 + 10, 10, GREEN);
            } else {
              it.circle(110, line_1 + 10, 10, GREY);
            }
          } else {
            it.filled_rectangle(100, line_1, 20, 20, YELLOW);
            it.printf(125, line_1, id(latoblack), WHITE, "Unknown");
          }
          
          // Cuisine light status
          it.printf(20, line_2, id(latoblack), WHITE, "Cuisine");
          
          if (id(light_cuisine).has_state()) {
            if (id(light_cuisine).state == "on") {
              it.filled_circle(110, line_2 + 10, 10, GREEN);
            } else {
              it.circle(110, line_2 + 10, 10, GREY);
            }
          } else {
            it.filled_rectangle(100, line_2, 20, 20, YELLOW);
            it.printf(125, line_2, id(latoblack), WHITE, "Unknown");
          }

          // Logger messages
          if (id(ttgo_logger).has_state() && id(ttgo_logger).state != "none") {
            std::string message = id(ttgo_logger).state;
            int y_pos = line_3;
            int line_height = 20;
            size_t start = 0;
            size_t end = 0;

            while (start < message.length() && y_pos < 200) {
              size_t chars_that_fit = 30;
              end = start + chars_that_fit;
              if (end >= message.length()) {
                end = message.length();
              } else {
                size_t space_pos = message.rfind(' ', end);
                if (space_pos > start && space_pos < end) {
                  end = space_pos + 1;
                }
              }

              // Triangle
              it.filled_triangle(5, y_pos + 5, 5, y_pos + 15, 12, y_pos + 10, ORANGE);

              it.printf(20, y_pos, id(latoblack), WHITE, "%s", message.substr(start, end - start).c_str());
              y_pos += line_height;
              start = end;
            }
          } else {
            it.printf(10, line_3, id(latoblack), WHITE, "Aucune notification");
          }

## Colors
color:
  - id: WHITE
    red: 100%
    green: 100%
    blue: 100%
  - id: GREEN
    red: 0%
    green: 100%
    blue: 0%
  - id: RED
    red: 100%
    green: 0%
    blue: 0%
  - id: YELLOW
    red: 100%
    green: 100%
    blue: 0%
  - id: ORANGE
    red: 100%
    green: 60%
    blue: 0%
  - id: GREY
    red: 30%
    green: 30%
    blue: 30%

## Fonts:
font:
  - file:
      type: gfonts
      family: Lato
      weight: 400
    id: lato
    size: 15
  - file:
      type: gfonts
      family: Lato
      weight: 900
    id: latoblack
    size: 15
  - file:
      type: gfonts
      family: Lato
      weight: 900
    id: latoblackheading1
    size: 20
